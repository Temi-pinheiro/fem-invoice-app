// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider          = "postgresql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
  directUrl         = env("DIRECT_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  invoices      Invoice[]

  BankAccount BankAccount[]
}

model Invoice {
  id               String            @id @default(cuid())
  invoiceNum       String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
  dueDate          DateTime
  description      String
  amount           Float
  paymentTermId    String
  billingAddress   BillingAddress?
  receivingAddress ReceivingAddress?
  status           Status            @default(pending)
  user             User              @relation(fields: [userId], references: [id])
  userId           String
  items            Items[]
}

model ReceivingAddress {
  id                   String       @id @default(uuid())
  invoice              Invoice      @relation(fields: [invoiceId], references: [id])
  invoiceId            String       @unique
  city                 String
  address              String
  country              String
  postCode             String
  accountDetails       BankAccount? @relation(fields: [bankAccountAccountNo, bankAccountUserId], references: [accountNo, userId])
  bankAccountAccountNo Int?
  bankAccountUserId    String?
}

model BillingAddress {
  id         String  @id @default(uuid())
  invoice    Invoice @relation(fields: [invoiceId], references: [id])
  invoiceId  String  @unique
  email      String
  clientName String
  city       String
  address    String
  country    String
  postCode   String
}

model BankAccount {
  id               String             @id @default(cuid())
  bankName         String
  accountName      String
  accountNo        Int
  user             User               @relation(fields: [userId], references: [id])
  userId           String             @unique
  ReceivingAddress ReceivingAddress[]

  @@unique([accountNo, userId])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Terms {
  id    Int    @id @default(autoincrement())
  label String
  value String @unique
}

model Items {
  id        String   @id @default(cuid())
  name      String
  quantity  Int
  price     Float
  Invoice   Invoice? @relation(fields: [invoiceId], references: [id])
  invoiceId String?
}

enum Status {
  paid
  pending
  overdue
  draft
}
